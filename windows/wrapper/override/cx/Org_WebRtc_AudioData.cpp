// Generated by zsLibEventingTool


#ifndef CX_USE_GENERATED_ORG_WEBRTC_AUDIODATA
#include <wrapper/override/cx/Org_WebRtc_AudioData.cpp>
#else // CX_USE_GENERATED_ORG_WEBRTC_AUDIODATA
#include "cx_Helpers.h"
#include "Org_WebRtc_AudioData.h"
#include "Org_WebRtc_VideoFormat.h"
#include "Org_WebRtc_RTCRtcpFeedback.h"
#include "Org_WebRtc_RTCRtpCodecCapability.h"
#include "Org_WebRtc_RTCRtpContributingSource.h"
#include "Org_WebRtc_RTCRtpDecodingParameters.h"
#include "Org_WebRtc_RTCRtpSynchronizationSource.h"
#include "Org_WebRtc_RTCIceServer.h"
#include "Org_WebRtc_RTCRtpCodecParameters.h"
#include "Org_WebRtc_RTCDtlsFingerprint.h"
#include "Org_WebRtc_Constraint.h"
#include "Org_WebRtc_RTCRtpHeaderExtensionCapability.h"
#include "Org_WebRtc_RTCRtpHeaderExtensionParameters.h"
#include "Org_WebRtc_VideoDeviceInfo.h"
#include "Org_WebRtc_RTCStatsReport.h"
#include "Org_WebRtc_RTCCertificate.h"
#include "Org_WebRtc_RTCSessionDescription.h"
#include "Org_WebRtc_RTCRtpReceiver.h"
#include "Org_WebRtc_RTCRtpEncodingParameters.h"
#include "Org_WebRtc_RTCIceCandidate.h"
#include "Org_WebRtc_RTCRtpTransceiver.h"
#include "Org_WebRtc_RTCRtpSender.h"

//------------------------------------------------------------------------------
::Org::WebRtc::AudioData^ Org::WebRtc::AudioData::ToCx(wrapper::org::webRtc::AudioDataPtr value)
{
  if (!value) return nullptr;
  auto result = ref new AudioData(WrapperCreate{});
  result->native_ = value;
  return result;
}

//------------------------------------------------------------------------------
wrapper::org::webRtc::AudioDataPtr Org::WebRtc::AudioData::FromCx(::Org::WebRtc::AudioData^ value)
{
  if (nullptr == value) return wrapper::org::webRtc::AudioDataPtr();
  return value->native_;
}

//------------------------------------------------------------------------------
Org::WebRtc::AudioData::AudioData()
 : native_(wrapper::org::webRtc::AudioData::wrapper_create())
{
  if (!native_) {throw ref new Platform::NullReferenceException();}
  native_->wrapper_init_org_webRtc_AudioData();
}

//------------------------------------------------------------------------------
Platform::Boolean Org::WebRtc::AudioData::ReadOnly::get()
{
  if (!native_) {throw ref new Platform::NullReferenceException();}
  return ::Internal::Helper::ToCx_Boolean(native_->get_readOnly());
}

//------------------------------------------------------------------------------
Windows::Foundation::Collections::IVectorView< int16 >^ Org::WebRtc::AudioData::Data::get()
{
  if (!native_) {throw ref new Platform::NullReferenceException();}
  return ::Internal::Helper::ToCx_List_Int16(native_->get_data());
}

//------------------------------------------------------------------------------
void Org::WebRtc::AudioData::Data::set(Windows::Foundation::Collections::IVectorView< int16 >^ value)
{
  if (!native_) {throw ref new Platform::NullReferenceException();}
  native_->set_data(::Internal::Helper::FromCx_List_Int16(value));
}


#endif //ifndef CX_USE_GENERATED_ORG_WEBRTC_AUDIODATA
