// Generated by zsLibEventingTool

#include "impl_org_webRtc_AudioBuffer.h"

using ::zsLib::String;
using ::zsLib::Optional;
using ::zsLib::Any;
using ::zsLib::AnyPtr;
using ::zsLib::AnyHolder;
using ::zsLib::Promise;
using ::zsLib::PromisePtr;
using ::zsLib::PromiseWithHolder;
using ::zsLib::PromiseWithHolderPtr;
using ::zsLib::eventing::SecureByteBlock;
using ::zsLib::eventing::SecureByteBlockPtr;
using ::std::shared_ptr;
using ::std::weak_ptr;
using ::std::make_shared;
using ::std::list;
using ::std::set;
using ::std::map;

// borrow definitions from class
ZS_DECLARE_TYPEDEF_PTR(wrapper::impl::org::webRtc::AudioBuffer::WrapperImplType, WrapperImplType);
ZS_DECLARE_TYPEDEF_PTR(WrapperImplType::WrapperType, WrapperType);

//------------------------------------------------------------------------------
wrapper::impl::org::webRtc::AudioBuffer::AudioBuffer() noexcept
{
}

//------------------------------------------------------------------------------
wrapper::org::webRtc::AudioBufferPtr wrapper::org::webRtc::AudioBuffer::wrapper_create() noexcept
{
  auto pThis = make_shared<wrapper::impl::org::webRtc::AudioBuffer>();
  pThis->thisWeak_ = pThis;
  return pThis;
}

//------------------------------------------------------------------------------
wrapper::impl::org::webRtc::AudioBuffer::~AudioBuffer() noexcept
{
  thisWeak_.reset();
}

//------------------------------------------------------------------------------
void wrapper::impl::org::webRtc::AudioBuffer::wrapper_dispose() noexcept
{
}

//------------------------------------------------------------------------------
void wrapper::impl::org::webRtc::AudioBuffer::wrapper_init_org_webRtc_AudioBuffer(wrapper::org::webRtc::AudioBufferConfigurationPtr config) noexcept
{
}

//------------------------------------------------------------------------------
wrapper::org::webRtc::AudioDataPtr wrapper::impl::org::webRtc::AudioBuffer::channel(int channelIndex) noexcept
{
  wrapper::org::webRtc::AudioDataPtr result {};
  return result;
}

//------------------------------------------------------------------------------
wrapper::org::webRtc::AudioDataPtr wrapper::impl::org::webRtc::AudioBuffer::splitBand(
  int channel,
  int band
  ) noexcept
{
  wrapper::org::webRtc::AudioDataPtr result {};
  return result;
}

//------------------------------------------------------------------------------
wrapper::org::webRtc::AudioDataPtr wrapper::impl::org::webRtc::AudioBuffer::splitChannel(
  int band,
  int channel
  ) noexcept
{
  wrapper::org::webRtc::AudioDataPtr result {};
  return result;
}

//------------------------------------------------------------------------------
void wrapper::impl::org::webRtc::AudioBuffer::deinterleaveFrom(wrapper::org::webRtc::AudioFramePtr frame) noexcept
{
}

//------------------------------------------------------------------------------
void wrapper::impl::org::webRtc::AudioBuffer::interleaveTo(wrapper::org::webRtc::AudioFramePtr frame) noexcept
{
}

//------------------------------------------------------------------------------
void wrapper::impl::org::webRtc::AudioBuffer::copyLowPassToReference() noexcept
{
}

//------------------------------------------------------------------------------
void wrapper::impl::org::webRtc::AudioBuffer::splitIntoFrequencyBands() noexcept
{
}

//------------------------------------------------------------------------------
void wrapper::impl::org::webRtc::AudioBuffer::mergeFrequencyBands() noexcept
{
}

//------------------------------------------------------------------------------
int wrapper::impl::org::webRtc::AudioBuffer::get_channels() noexcept
{
  int result {};
  return result;
}

//------------------------------------------------------------------------------
int wrapper::impl::org::webRtc::AudioBuffer::get_samplesPerChannel() noexcept
{
  int result {};
  return result;
}

//------------------------------------------------------------------------------
wrapper::org::webRtc::AudioDataPtr wrapper::impl::org::webRtc::AudioBuffer::get_mixedLowPassData() noexcept
{
  wrapper::org::webRtc::AudioDataPtr result {};
  return result;
}

//------------------------------------------------------------------------------
wrapper::org::webRtc::AudioDataPtr wrapper::impl::org::webRtc::AudioBuffer::get_lowPassReference() noexcept
{
  wrapper::org::webRtc::AudioDataPtr result {};
  return result;
}

//------------------------------------------------------------------------------
wrapper::org::webRtc::VadActivity wrapper::impl::org::webRtc::AudioBuffer::get_activity() noexcept
{
  wrapper::org::webRtc::VadActivity result {};
  return result;
}

//------------------------------------------------------------------------------
void wrapper::impl::org::webRtc::AudioBuffer::set_activity(wrapper::org::webRtc::VadActivity value) noexcept
{
}


