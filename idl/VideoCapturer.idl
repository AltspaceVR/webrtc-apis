/*

 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.
 
 */


namespace org
{
  namespace webRtc
  {
    [special]
    struct VideoDeviceInfo
    {
      [constructor, default, delete]
      void VideoDeviceInfo();

      [getter]
      zs::Any info;
    };
    typedef std::list<VideoDeviceInfo> VideoDeviceInfoList;
    typedef zs::PromiseWith<VideoDeviceInfoList> PromiseWithVideoDeviceInfoList;

    struct VideoFormat
    {
      /// <summary>
      /// Number of pixels.
      /// </summary>
      int width;

      /// <summary>
      /// Number of pixels.
      /// </summary>
      int height;

      /// <summary>
      /// Number of pixels.
      /// </summary>
      Nanoseconds interval;  /// Nanoseconds.

      /// <summary>
      /// Color space. FOURCC_ANY (0xFFFFFFFF) means that any color space is OK.
      /// </summary>
      uint32 fourcc;

      [getter]
      int framerate;

      [getter]
      float framerateFloat;

      [getter]
      bool isSize0x0;

      bool IsPixelRateLess(VideoFormat other);

      [constructor, default]
      void VideoFormat();

      [constructor, default, altname(VideoFormatClone)]
      void VideoFormat(VideoFormat source);
    };

    [dictionary]
    struct VideoCapturerInputSize
    {
      int width;
      int height;
    };

    [disposable]
    interface VideoCapturer
    {
      [constructor, default, delete]
      void VideoCapturer();

      [static]
      VideoCapturer create(string name, string id, bool enableMrc);

      [static]
      PromiseWithVideoDeviceInfoList getDevices();

      [getter]
      bool applyRotation;

      /// <summary>
      /// Returns true if the capturer is screencasting. This can be used to
      /// implement screencast specific behavior.
      /// </summary>
      [getter]
      bool isScreencast;

      [getter]
      MediaSourceState state;
	  
      /// <summary>
      /// Event fires when a new video frame buffer is available.
      /// </summary>
      [event]
      void onVideoFrame(VideoFrameBufferEvent event);
	  
    };
  }
}
